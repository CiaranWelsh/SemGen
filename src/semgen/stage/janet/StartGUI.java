package semgen.stage.janet;


import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.io.File;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JMenuItem;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.SwingUtilities;
import javax.swing.event.TreeSelectionListener;
import javax.swing.text.Position;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


/**
 *
 * @author sven251
 */

public class StartGUI extends javax.swing.JFrame {
    public StartGUI() throws HeadlessException {
    
         initComponents();
        
        
    }
//public class StartGUI extends javax.swing.JFrame {

    /**
     * Creates new form testFrame
     */
   /* public StartGUI() {
        initComponents();
    }*/

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jComboBox1 = new javax.swing.JComboBox();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();

        jPopupMenu1.setToolTipText("");

        jMenuItem1.setText("jMenuItem1");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Enter Search Term");

        jButton1.setText("Enter");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setEnabled(false);
        jScrollPane1.setViewportView(jTextArea1);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PMR" }));

        jButton2.setText("Open");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Waiting For Search");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTree1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTree1);

        jList1.setModel(jList1.getModel());
        jScrollPane3.setViewportView(jList1);

        jLabel2.setText("Repository:");

        jButton3.setText("Cancel");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel4.setText("[W]: Workspace, [M]: Model");
        jLabel4.setVisible(false);

        jButton4.setText("Clear All Selections");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Remove Selected Item");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Search Repository");

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane4.setViewportView(jTextArea2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(358, 358, 358))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE)
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jButton4))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 274, Short.MAX_VALUE)
                                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(42, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane4)
                                .addContainerGap())))
                    .addComponent(jLabel4)))
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(193, 193, 193)
                        .addComponent(jButton6)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(28, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
                            .addComponent(jButton6))
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                            .addComponent(jScrollPane4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

  
  public  boolean treeADD(String [][] packed_Str, int searchItemsFound, DefaultMutableTreeNode root) {

            DefaultMutableTreeNode   r, s , t,  returnedNode;
            DefaultMutableTreeNode   L1 = null, L2 = null;
            String enumString = null;
            
            /*ImageIcon leafIcon = createImageIcon("/images/green.gif");
            ImageIcon openIcon = createImageIcon("/images/green.gif");
            ImageIcon closedIcon = createImageIcon("/images/green.gif");
            DefaultTreeCellRenderer renderer =  (DefaultTreeCellRenderer)jTree1.getCellRenderer();
             */   
            
            System.out.println("packed_Str.length = " + packed_Str.length);

            /* create nodes to be searched*/
            String toSearch_depth01 = null;
            String toSearch_depth02 = null;
            String toSearch_depth03 = null;
            
            for (int i = 0; i < packed_Str.length-1; i++)
          
            {
               toSearch_depth01 = "[Search Results, " + packed_Str[i][0]+  "]";
               toSearch_depth02 = "[Search Results, " + packed_Str[i][0]+  ", " + packed_Str[i][1] + "]";
       
               //System.out.println("toSearch_depth01 = " + toSearch_depth01);
               //System.out.println("toSearch_depth02 = " + toSearch_depth02);
            
                returnedNode = parseSearchResults.BFS_Enumerate_Jtree(root, toSearch_depth01, toSearch_depth02 );
            
                // get an enumeration that will visit every tree node
          
             
                if( returnedNode == null)//add it to the root
                {
                     root.add(r = new DefaultMutableTreeNode(packed_Str[i][0], true));
                      System.out.println("Adding TO ROOT = " + "ROOT" + "," + packed_Str[i][0]);
            
                }
             
             
                /*Re-Enumerate tree after adding node*/
                returnedNode = parseSearchResults.BFS_Enumerate_Jtree(root, toSearch_depth01, toSearch_depth02 );
                int treeLevel = 0;
             
                if(returnedNode!= null)
                 treeLevel = returnedNode.getLevel();
             
                System.out.println("Tree level for L1 = " + treeLevel);
                if(treeLevel == 1)//add it to L1
                {
                     r = returnedNode;
                    r.add(s = new DefaultMutableTreeNode(packed_Str[i][1], true));
                 
                    System.out.println("Adding L1 = " + L1 + "," + packed_Str[i][1]);
                }
   
                /*Enumerate tree after adding node*/
                returnedNode = parseSearchResults.BFS_Enumerate_Jtree(root, toSearch_depth01, toSearch_depth02 );
             
                treeLevel = 0;
             
                if(returnedNode!= null)
                treeLevel = returnedNode.getLevel();
             
               // System.out.println("Tree level for L2 = " + treeLevel);
                /*if(treeLevel == 2)//add it to L2 //The variables need not be on the tree for PMR
                {
                    s = returnedNode;
                    s.add(t = new DefaultMutableTreeNode(packed_Str[i][2], true));
                    
                }  
             */
            }//end for
            

   
             
           
       
             return false;
    }
    
    
    
    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    @SuppressWarnings("unchecked")   
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String searchTerm = null;
        String rawSearchData =  null;
        rawSearchData = null;
        Boolean resultBool;
    	  
    	String linksArea = null;
    	String httpText = null;
        String workSpaceText = null;
        String fileNameSpaceText = null;
        String variableSpaceText = null;
        int searchItemsFound = 0;
        
          
        model = new DefaultListModel();
       jList1.setModel(model);
       
     	Cursor hourglassCursor = new Cursor(Cursor.WAIT_CURSOR);//hour glass mouse
        setCursor(hourglassCursor);
        
        String ComboSelectionStr=jComboBox1.getSelectedItem().toString();
        if(ComboSelectionStr.equals("PMR"))//make the label info w.r.t "PMR" visible
            jLabel4.setVisible(true);
            

        
        searchTerm = jTextField1.getText();
        searchTerm = searchTerm.toUpperCase();
        
        try {    
                    rawSearchData = Network.fetchedData(searchTerm);
                    jTextArea2.setText(null);
                    jTextArea2.append(rawSearchData  +"\r\n");
                    resultBool = parseSearchResults.parseSearchStatus(rawSearchData); //Search result exists or no
    	          
    	            linksArea = parseSearchResults.linksSpace(rawSearchData);
    	            System.out.println("linksText = " + linksArea);
         	           
    	            httpText = parseSearchResults.parseHttp(linksArea, resultBool);
    	            workSpaceText = parseSearchResults.workSpace(linksArea, resultBool);
    	            fileNameSpaceText = parseSearchResults.fileSpace(httpText, resultBool);
    	            variableSpaceText = parseSearchResults.variableSpace(httpText, resultBool);
    	            searchItemsFound = parseSearchResults.countNumStrings(httpText);
            
            
                    String workspaceArray[] = parseSearchResults.splitString(workSpaceText, searchItemsFound, resultBool);
                    String fileNameSpaceArray[] = parseSearchResults.splitString(fileNameSpaceText, searchItemsFound, resultBool);
                    String variableSpaceArray[] = parseSearchResults.splitString(variableSpaceText, searchItemsFound, resultBool);
                    String[][] packed_Str = parseSearchResults.repack(workspaceArray, fileNameSpaceArray, variableSpaceArray, searchItemsFound);
                   
           
                   
                    javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Search Results");
                    javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("No Results found");

                    if(resultBool==true)
                    {
                        
                        //JTree tree = new JTree(treeNode1);
                        DefaultTreeCellRenderer renderer = (DefaultTreeCellRenderer) jTree1.getCellRenderer();
                        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
                        treeADD(packed_Str, searchItemsFound, treeNode1); 
                      //  for (int i = 0; i < jTree1.getRowCount(); i++) {
                       //  jTree1.expandRow(i);
                      //  }
                        jTree1.setRootVisible(false);
                        
                        
                        DefaultMutableTreeNode currentNode = treeNode1.getNextNode();
                        do {
                            if (currentNode.getLevel()==1) 
                            jTree1.expandPath(new TreePath(currentNode.getPath()));
                            currentNode = currentNode.getNextNode();
                            }
                         while (currentNode != null);
                        
                                      //
        // Change the default JTree icons
        //
                        
                        Icon closedIcon = new ImageIcon("closed.png");
                        Icon openIcon = new ImageIcon("open.png");
                        Icon leafIcon = new ImageIcon("leaf.png");
                        renderer.setClosedIcon(closedIcon);
                        renderer.setOpenIcon(openIcon);
                        renderer.setLeafIcon(leafIcon);
                        //JScrollPane pane = new JScrollPane(jTree1);
                        //pane.setPreferredSize(new Dimension(200, 400));
                       //getContentPane().add(jTree1);     
                    
                    }
                    else
                    {
                   
                        jTree1.setRootVisible(true);//set the root of the tree to VISIBLE
                        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode2));
                   
                        
                    }
                    
                    Cursor normalCursor = new Cursor(Cursor.DEFAULT_CURSOR);//set mouse cursor back to default
                    setCursor(normalCursor);
                    
            }       catch (Exception ex) {
                   Logger.getLogger(StartGUI.class.getName()).log(Level.SEVERE, null, ex);
                   }
    }//GEN-LAST:event_jButton1ActionPerformed

    @SuppressWarnings("unchecked")   
    private void jTree1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTree1MouseClicked
        // TODO add your handling code here:
        String nodeVal=null;
        String nodePath=null;
        TreeNode[] path = null;
        TreeNode node = null;
        
 
         
        DefaultMutableTreeNode selectedNode = null;
        selectedNode = (DefaultMutableTreeNode)jTree1.getLastSelectedPathComponent();
        //jTextArea1.setVisible(false); 
        if( selectedNode != null&& (selectedNode.toString().equals("No Results found") == false && selectedNode.toString().equals("Waiting For Search")==false))
        {
            if(selectedNode.isLeaf() && selectedNode.getDepth()!=1)
            {
           
                nodeVal = selectedNode.toString();
                //System.out.println("nodeVal = " + nodeVal);
                path =	selectedNode.getPath();
                
                TreePath mouse_tp = jTree1.getPathForLocation(evt.getX(), evt.getY());
                jTree1.getSelectionModel().removeSelectionPath(mouse_tp);//so that the next mouse click event doesn't pick and display the same selected leaf node.
                
                System.out.println(" selectedNode.toString() = " + Arrays.toString(path) );
                 jTextArea1.append(Arrays.toString(path)  +"\r\n");
                 String textAreaStr = jTextArea1.toString();
                 System.out.println("textAreaStr = " + textAreaStr );
                 
                String listStr = null;
                listStr = parseSearchResults.parseStrForListDisplay( Arrays.toString(path));
                String pathstr = listStr;
                 
                String s = listStr;//Say you want to look up for String "element "
                System.out.println("jList1.getModel().getSize(); = " + jList1.getModel().getSize());
                int existInList = 0;
                
                for (int i = 0; i < jList1.getModel().getSize(); i++) {
                     Object item = jList1.getModel().getElementAt(i);
                     String testStr = item.toString(); 
                     if(testStr.equals(listStr))
                       existInList = 1;  
                     //System.out.println("Item matched= " + listStr);
                }  
                if(existInList==1)
                 javax.swing.JOptionPane.showMessageDialog(null, "That Workspace and Model combination has already been chosen.");
                 
 /* jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        jMenuItem1ActionPerformed(evt);
    }
});*/
  
  

  
  
  
                       
                /*make jList threadsafe*/
                if(existInList!=1)//only when flag is not 1 to prevent duplicate entries entering the list
                    SwingUtilities.invokeLater(() -> {
                     model.addElement(pathstr);
                      }); 
                 
     
             }
            
        }
   
        //selectedNode = null; //so that the next mouse click event doesn't pick and dsiplay the same selected leaf node.
        
    }//GEN-LAST:event_jTree1MouseClicked

  
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        this.dispose();
        //setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        //System.exit(0);
        //st.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
       
    if(evt.getSource()==jButton4) {
       
        int selectedIndex = jList1.getSelectedIndex();
        int numListElements = jList1.getModel().getSize();
        System.out.println("Selected Index = " + selectedIndex);
        if (numListElements > 0)
        {
            DefaultListModel listModel = (DefaultListModel) jList1.getModel();
            listModel.removeAllElements();
         }
    }

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        int selectedIndex = jList1.getSelectedIndex();
        System.out.println("Selected Index = " + selectedIndex);
         if (selectedIndex != -1) {
            DefaultListModel model = (DefaultListModel) jList1.getModel();
            model.remove(selectedIndex);
         }
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

 

    
    


    /** Returns an ImageIcon, or null if the path was invalid. */
    protected static ImageIcon createImageIcon(String path) {
        java.net.URL imgURL = StartGUI.class.getResource(path);
        if (imgURL != null) {
            return new ImageIcon(imgURL);
        } else {
            System.out.println("Couldn't find file: " + path);
            return null;
        }
    }

 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList jList1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
    private DefaultListModel model;//for the jList
       
}

